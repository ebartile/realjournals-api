# Generated by Django 4.2.7 on 2023-11-18 17:40

import apps.accounts.models
import apps.utils.time
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(blank=True, max_length=250, unique=True, verbose_name='slug')),
                ('description', models.TextField(verbose_name='description')),
                ('logo', models.FileField(blank=True, max_length=500, null=True, upload_to=apps.accounts.models.get_account_file_path, verbose_name='logo')),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='created date')),
                ('modified_date', models.DateTimeField(auto_now=True, verbose_name='modified date')),
                ('timezone', models.CharField(choices=[('Etc/UTC', '(+00:00) Azores'), ('Etc/UTC', '(+00:00) Monrovia'), ('Etc/UTC', '(+00:00) UTC'), ('Africa/Casablanca', '(+01:00) Casablanca'), ('Europe/Dublin', '(+01:00) Dublin'), ('Europe/London', '(+01:00) Edinburgh'), ('Europe/Lisbon', '(+01:00) Lisbon'), ('Europe/London', '(+01:00) London'), ('Africa/Lagos', '(+01:00) West Central Africa'), ('Europe/Amsterdam', '(+02:00) Amsterdam'), ('Europe/Belgrade', '(+02:00) Belgrade'), ('Europe/Berlin', '(+02:00) Berlin'), ('Europe/Zurich', '(+02:00) Bern'), ('Europe/Bratislava', '(+02:00) Bratislava'), ('Europe/Brussels', '(+02:00) Brussels'), ('Europe/Budapest', '(+02:00) Budapest'), ('Europe/Copenhagen', '(+02:00) Copenhagen'), ('Africa/Harare', '(+02:00) Harare'), ('Europe/Kaliningrad', '(+02:00) Kaliningrad'), ('Europe/Ljubljana', '(+02:00) Ljubljana'), ('Europe/Madrid', '(+02:00) Madrid'), ('Europe/Paris', '(+02:00) Paris'), ('Europe/Prague', '(+02:00) Prague'), ('Africa/Johannesburg', '(+02:00) Pretoria'), ('Europe/Rome', '(+02:00) Rome'), ('Europe/Sarajevo', '(+02:00) Sarajevo'), ('Europe/Skopje', '(+02:00) Skopje'), ('Europe/Stockholm', '(+02:00) Stockholm'), ('Europe/Vienna', '(+02:00) Vienna'), ('Europe/Warsaw', '(+02:00) Warsaw'), ('Europe/Zagreb', '(+02:00) Zagreb'), ('Europe/Zurich', '(+02:00) Zurich'), ('Europe/Athens', '(+03:00) Athens'), ('Asia/Baghdad', '(+03:00) Baghdad'), ('Europe/Bucharest', '(+03:00) Bucharest'), ('Africa/Cairo', '(+03:00) Cairo'), ('Europe/Helsinki', '(+03:00) Helsinki'), ('Europe/Istanbul', '(+03:00) Istanbul'), ('Asia/Jerusalem', '(+03:00) Jerusalem'), ('Asia/Kuwait', '(+03:00) Kuwait'), ('Europe/Kiev', '(+03:00) Kyiv'), ('Europe/Minsk', '(+03:00) Minsk'), ('Europe/Moscow', '(+03:00) Moscow'), ('Africa/Nairobi', '(+03:00) Nairobi'), ('Europe/Riga', '(+03:00) Riga'), ('Asia/Riyadh', '(+03:00) Riyadh'), ('Europe/Sofia', '(+03:00) Sofia'), ('Europe/Moscow', '(+03:00) St. Petersburg'), ('Europe/Tallinn', '(+03:00) Tallinn'), ('Europe/Vilnius', '(+03:00) Vilnius'), ('Europe/Volgograd', '(+03:00) Volgograd'), ('Asia/Tehran', '(+03:30) Tehran'), ('Asia/Dubai', '(+04:00) Abu Dhabi'), ('Asia/Baku', '(+04:00) Baku'), ('Asia/Muscat', '(+04:00) Muscat'), ('Europe/Samara', '(+04:00) Samara'), ('Asia/Tbilisi', '(+04:00) Tbilisi'), ('Asia/Yerevan', '(+04:00) Yerevan'), ('Asia/Kabul', '(+04:30) Kabul'), ('Asia/Karachi', '(+05:00) Ekaterinburg'), ('Asia/Karachi', '(+05:00) Islamabad'), ('Asia/Karachi', '(+05:00) Karachi'), ('Asia/Tashkent', '(+05:00) Tashkent'), ('Asia/Kolkata', '(+05:30) Chennai'), ('Asia/Kolkata', '(+05:30) Kolkata'), ('Asia/Kolkata', '(+05:30) Mumbai'), ('Asia/Kolkata', '(+05:30) New Delhi'), ('Asia/Colombo', '(+05:30) Sri Jayawardenepura'), ('Asia/Kathmandu', '(+05:45) Kathmandu'), ('Asia/Almaty', '(+06:00) Almaty'), ('Asia/Almaty', '(+06:00) Astana'), ('Asia/Dhaka', '(+06:00) Dhaka'), ('Asia/Urumqi', '(+06:00) Urumqi'), ('Asia/Yangon', '(+06:30) Rangoon'), ('Asia/Bangkok', '(+07:00) Bangkok'), ('Asia/Ho_Chi_Minh', '(+07:00) Hanoi'), ('Asia/Jakarta', '(+07:00) Jakarta'), ('Asia/Krasnoyarsk', '(+07:00) Krasnoyarsk'), ('Asia/Novosibirsk', '(+07:00) Novosibirsk'), ('Asia/Shanghai', '(+08:00) Beijing'), ('Asia/Chongqing', '(+08:00) Chongqing'), ('Asia/Hong_Kong', '(+08:00) Hong Kong'), ('Asia/Irkutsk', '(+08:00) Irkutsk'), ('Asia/Kuala_Lumpur', '(+08:00) Kuala Lumpur'), ('Australia/Perth', '(+08:00) Perth'), ('Asia/Singapore', '(+08:00) Singapore'), ('Asia/Taipei', '(+08:00) Taipei'), ('Asia/Ulaanbaatar', '(+08:00) Ulaanbaatar'), ('Asia/Tokyo', '(+09:00) Osaka'), ('Asia/Tokyo', '(+09:00) Sapporo'), ('Asia/Seoul', '(+09:00) Seoul'), ('Asia/Tokyo', '(+09:00) Tokyo'), ('Asia/Yakutsk', '(+09:00) Yakutsk'), ('Australia/Darwin', '(+09:30) Darwin'), ('Australia/Brisbane', '(+10:00) Brisbane'), ('Pacific/Guam', '(+10:00) Guam'), ('Pacific/Port_Moresby', '(+10:00) Port Moresby'), ('Asia/Vladivostok', '(+10:00) Vladivostok'), ('Australia/Adelaide', '(+10:30) Adelaide'), ('Australia/Sydney', '(+11:00) Canberra'), ('Australia/Hobart', '(+11:00) Hobart'), ('Asia/Magadan', '(+11:00) Magadan'), ('Australia/Melbourne', '(+11:00) Melbourne'), ('Pacific/Noumea', '(+11:00) New Caledonia'), ('Pacific/Guadalcanal', '(+11:00) Solomon Is.'), ('Asia/Srednekolymsk', '(+11:00) Srednekolymsk'), ('Australia/Sydney', '(+11:00) Sydney'), ('Pacific/Fiji', '(+12:00) Fiji'), ('Asia/Kamchatka', '(+12:00) Kamchatka'), ('Pacific/Majuro', '(+12:00) Marshall Is.'), ('Pacific/Auckland', '(+13:00) Auckland'), ('Pacific/Tongatapu', "(+13:00) Nuku'alofa"), ('Pacific/Apia', '(+13:00) Samoa'), ('Pacific/Fakaofo', '(+13:00) Tokelau Is.'), ('Pacific/Auckland', '(+13:00) Wellington'), ('Pacific/Chatham', 'Chatham Is.'), ('Etc/GMT+1', '(-01:00) Cape Verde Is.'), ('America/Godthab', '(-02:00) Greenland'), ('Atlantic/South_Georgia', '(-02:00) Mid-Atlantic'), ('America/St_Johns', '(-02:30) Newfoundland'), ('America/Halifax', '(-03:00) Atlantic Time (Canada)'), ('America/Sao_Paulo', '(-03:00) Brasilia'), ('America/Argentina/Buenos_Aires', '(-03:00) Buenos Aires'), ('America/Montevideo', '(-03:00) Montevideo'), ('America/Santiago', '(-03:00) Santiago'), ('America/Caracas', '(-04:00) Caracas'), ('America/New_York', '(-04:00) Eastern Time (US & Canada)'), ('America/Guyana', '(-04:00) Georgetown'), ('America/Indiana/Indianapolis', '(-04:00) Indiana (East)'), ('America/La_Paz', '(-04:00) La Paz'), ('America/Bogota', '(-05:00) Bogota'), ('America/Chicago', '(-05:00) Central Time (US & Canada)'), ('America/Lima', '(-05:00) Lima'), ('America/Guayaquil', '(-05:00) Quito'), ('America/Costa_Rica', '(-06:00) Central America'), ('America/Chihuahua', '(-06:00) Chihuahua'), ('America/Guadalajara', '(-06:00) Guadalajara'), ('America/Mexico_City', '(-06:00) Mexico City'), ('America/Monterrey', '(-06:00) Monterrey'), ('America/Denver', '(-06:00) Mountain Time (US & Canada)'), ('America/Regina', '(-06:00) Saskatchewan'), ('America/Phoenix', '(-07:00) Arizona'), ('America/Mazatlan', '(-07:00) Mazatlan'), ('America/Los_Angeles', '(-07:00) Pacific Time (US & Canada)'), ('America/Tijuana', '(-07:00) Tijuana'), ('America/Anchorage', '(-08:00) Alaska'), ('Pacific/Honolulu', '(-10:00) Hawaii'), ('Pacific/Pago_Pago', '(-11:00) American Samoa'), ('Pacific/Midway', '(-11:00) Midway Island'), ('Etc/GMT+12', '(-12:00) International Date Line West')], max_length=63)),
                ('has_be_configured', models.BooleanField(blank=True, default=False, verbose_name='has been configured')),
                ('is_private', models.BooleanField(blank=True, default=True, verbose_name='is private')),
                ('public_permissions', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(choices=[('view_account', 'View account'), ('view_journal', 'View journal'), ('add_journal', 'Add journal'), ('modify_journal', 'Modify journal'), ('delete_journal', 'Delete journal')], default=[]), size=None)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_featured', models.BooleanField(blank=True, default=False, verbose_name='is featured')),
                ('is_system', models.BooleanField(default=False)),
                ('blocked_code', models.CharField(blank=True, choices=[('blocked-by-nonpayment', 'This account is blocked due to payment failure'), ('blocked-by-staff', 'This account is blocked by admin staff'), ('blocked-by-deleting', "This account is blocked while it's deleted")], default=None, max_length=255, null=True, verbose_name='blocked code')),
                ('anon_permissions', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(choices=[('view_account', 'View account'), ('view_journal', 'View journal')]), blank=True, default=list, null=True, size=None, verbose_name='anonymous permissions')),
                ('username', models.IntegerField(default=0)),
                ('password', models.CharField(default='', max_length=100)),
                ('server', models.CharField(default='', max_length=100)),
                ('trade_mode', models.IntegerField(choices=[(0, 'Demo'), (1, 'Contest'), (2, 'Real')])),
                ('balance', models.FloatField()),
                ('leverage', models.FloatField()),
                ('profit', models.FloatField()),
                ('point', models.FloatField()),
                ('amount', models.FloatField(default=0)),
                ('equity', models.FloatField()),
                ('credit', models.FloatField()),
                ('margin', models.FloatField()),
                ('margin_level', models.FloatField()),
                ('margin_free', models.FloatField()),
                ('margin_mode', models.IntegerField(choices=[(0, 'Retail Netting'), (1, 'Exchange'), (2, 'Retail Hedging')])),
                ('margin_so_mode', models.IntegerField(choices=[(0, 'Percent'), (1, 'Money')])),
                ('margin_so_call', models.FloatField()),
                ('margin_so_so', models.FloatField()),
                ('margin_initial', models.FloatField()),
                ('margin_maintenance', models.FloatField()),
                ('fifo_close', models.BooleanField()),
                ('limit_orders', models.FloatField()),
                ('currency', models.CharField(default='USD', max_length=10)),
                ('trade_allowed', models.BooleanField(default=True)),
                ('trade_expert', models.BooleanField(default=True)),
                ('currency_digits', models.IntegerField()),
                ('assets', models.FloatField()),
                ('liabilities', models.FloatField()),
                ('commission_blocked', models.FloatField()),
                ('name', models.CharField(max_length=100)),
                ('company', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'account',
                'verbose_name_plural': 'accounts',
                'ordering': ['name', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Broker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250, unique=True, verbose_name='name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('logo', models.FileField(blank=True, max_length=500, null=True, upload_to=apps.accounts.models.get_broker_file_path, verbose_name='logo')),
                ('supports_stocks', models.BooleanField(default=False)),
                ('supports_options', models.BooleanField(default=False)),
                ('supports_forex', models.BooleanField(default=False)),
                ('supports_futures', models.BooleanField(default=False)),
                ('supports_crypto', models.BooleanField(default=False)),
                ('supports_metatrader_4', models.BooleanField(default=False)),
                ('supports_metatrader_5', models.BooleanField(default=False)),
                ('supports_file_import', models.BooleanField(default=False)),
                ('supports_auto_sync_import', models.BooleanField(default=False)),
                ('is_enabled', models.BooleanField(default=False)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='created date')),
            ],
            options={
                'verbose_name': 'broker',
                'verbose_name_plural': 'brokers',
            },
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='create at')),
                ('token', models.CharField(blank=True, default=None, max_length=60, null=True, verbose_name='token')),
                ('invitation_extra_text', models.TextField(blank=True, null=True, verbose_name='invitation extra text')),
                ('is_admin', models.BooleanField(default=False)),
                ('user_order', models.BigIntegerField(default=apps.utils.time.timestamp_ms, verbose_name='user order')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='accounts.account')),
            ],
            options={
                'verbose_name': 'membership',
                'verbose_name_plural': 'memberships',
                'ordering': ['account', 'user__first_name', 'user__last_name', 'user__email'],
            },
        ),
    ]
